name: Main Build (with versioning)
env:
  webapp_path: BennettJones.Rates

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x" # SDK Version to use; x will use the latest version of the 3.1 channel
          source-url: https://nuget.pkg.github.com/bennettjones/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.PULL_NPM}}
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.x" # SDK Version to use; x will use the latest version of the 3.1 channel
          source-url: https://nuget.pkg.github.com/bennettjones/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.PULL_NPM}}

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5

      - name: Cache NUGET packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/BennettJones.PMC.Web.csproj')}}

      - name: Setup NPM
        uses: actions/setup-node@v1
        with:
          node-version: "12"
          registry-url: "https://npm.pkg.github.com"

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm packages
        working-directory: ./${{env.webapp_path}}/ClientApp
        run: npm install
        env:
          NODE_AUTH_TOKEN: ${{secrets.PULL_NPM}}

      - name: Lint Angular app
        working-directory: ./${{env.webapp_path}}/ClientApp
        run: npm run lint

      - name: Bump Angular app version
        id: pre-version
        run: |
          echo "::set-output name=version::$(npm version patch)"
        working-directory: ./${{env.webapp_path}}/ClientApp

      - id: version
        run: |
          version=$(echo ${{steps.pre-version.outputs.version}} | cut -dv -f2)
          echo "::set-output name=version::$version"

      - name: Bump Dotnet Version
        run: |
          dotnet tool restore
          dotnet dotnet-version --project-file ./${{env.webapp_path}}/${{env.webapp_path}}.Web.csproj --skip-vcs ${{steps.version.outputs.version}}

      - name: Commit Version change
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Uprev to ${{steps.version.outputs.version}}

      - name: Compile Angular app
        working-directory: ./${{env.webapp_path}}/ClientApp
        run: npm run build -- --prod

      - name: Commit Version change
        run: git push

      - name: Publish App
        run: dotnet publish ./${{env.webapp_path}}/${{env.webapp_path}}.Web.csproj -c PROD -o ./publish

      - name: Create Artifact
        id: create-artifact
        uses: actions/upload-artifact@v2
        with:
          path: ./publish

      - name: Zip Artifact
        id: zip-artifact
        run: |
          zip -r artifact ./publish

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.version.outputs.version}}
          release_name: Release ${{steps.version.outputs.version}}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifact.zip
          asset_name: release-${{steps.version.outputs.version}}.zip
          asset_content_type: application/zip
